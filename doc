Java oops :
	Object oriented programming is about creating objects and contain both data and methods and oops provide clear structure for the programs
	Class
	Object
	Abstraction
	Inheritance
	Encapsulation
	Polymorphism
1.class
	Group of object and methods and its called blueprint for creating objects .
Ex:
public class Main {
  int x = 5;
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
}
2.object :
	Object is a real time entity.  An object has a state and behavior. Instance of a class ,
3.Abstraction:
	Showing only Essential parts , hiding the data.
Ex : Android apk.
abstract class Language {
  // method of abstract class
  public void display() {
    System.out.println("This is Java Programming");
  }
}

class Main extends Language {
  public static void main(String[] args) {
    Main obj = new Main();
    obj.display();
  }
}

4. Encapsulation
	 In encapsulation, wrapping the data , the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.
class Area {
  int length;
  int breadth;
to initialize values
  Area(int length, int breadth) {
    this.length = length;
    this.breadth = breadth;
  }
  public void getArea() {
    int area = length * breadth;
    System.out.println("Area: " + area);
  }
}
class Main {
  public static void main(String[] args) {
Area(5, 6);
    rectangle.getArea();
  }
}


Inheritence:
	class Animal {
  public void eat() {
    System.out.println("I can eat");
  }
}
class Dog extends Animal {
@Override
  public void eat() {
    System.out.println("I eat dog food");
  }
  public void bark() {
    System.out.println("I can bark");
  }
}

class Main {
  public static void main(String[] args) {
    Dog labrador = new Dog();
    labrador.eat();
    labrador.bark();
  }
}

Polymorphism
	Performing same method in different ways . More then one forms method name same but parameters name different defined in single class.
Ex
Public class maths {
Int add(int a, int b)
{
return a+b;
}
Int add(int a, int b, int c)
{
return a+b+c;
}
Public static void main(String [] args) 
{
Maths m = new Maths();
System.out.println(m.add(1,2));
System.out.println(m.add(1,2,4));
}
}
Interface :	An interface in the Java programming language is an abstract type that is used to specify a behavior that classes must implement.  
Ex
interface Language {
  void getName(String name);
}

class ProgrammingLanguage implements Language {

 public void getName(String name) {
    System.out.println("Programming Language: " + name);
  }
}

class Main {
  public static void main(String[] args) {
    ProgrammingLanguage language = new ProgrammingLanguage();
    language.getName("Java");
  }
}

Access specifiers :
1.public
2.private.
3.protected 
1. The public keyword is an access modifier used for classes, attributes, methods and constructors, making them accessible by any other class.
2 The private keyword is an access modifier used for attributes, methods and constructors, making them only accessible within the declared class.
3. The protected keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses.

